// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(TechGuardianContext))]
    [Migration("20230724004539_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Area", b =>
                {
                    b.Property<int>("Id_area")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_area");

                    b.ToTable("area", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Arl", b =>
                {
                    b.Property<int>("Id_arl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_arl");

                    b.ToTable("arl", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Camper", b =>
                {
                    b.Property<int>("Id_camper")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Id_eps")
                        .HasColumnType("int");

                    b.HasKey("Id_camper");

                    b.HasIndex("Id_eps");

                    b.ToTable("camper", (string)null);
                });

            modelBuilder.Entity("Core.Entities.CamperPersona", b =>
                {
                    b.Property<int>("Id_camper_persona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Id_camper")
                        .HasColumnType("int");

                    b.Property<int>("Id_persona")
                        .HasColumnType("int");

                    b.HasKey("Id_camper_persona");

                    b.HasIndex("Id_camper");

                    b.HasIndex("Id_persona");

                    b.ToTable("camper_persona", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Categoria", b =>
                {
                    b.Property<int>("Id_categoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_categoria");

                    b.ToTable("categoria", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Componente", b =>
                {
                    b.Property<int>("id_componente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("id_componente");

                    b.ToTable("componente", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Eps", b =>
                {
                    b.Property<int>("Id_arl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_arl");

                    b.ToTable("eps", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Equipo", b =>
                {
                    b.Property<int>("Id_equipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_equipo");

                    b.ToTable("equipo", (string)null);
                });

            modelBuilder.Entity("Core.Entities.EquipoComponente", b =>
                {
                    b.Property<int>("Id_equipo_componente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Id_equipo")
                        .HasColumnType("int");

                    b.Property<int>("id_componente")
                        .HasColumnType("int");

                    b.HasKey("Id_equipo_componente");

                    b.HasIndex("Id_equipo");

                    b.HasIndex("id_componente");

                    b.ToTable("equipo_componente", (string)null);
                });

            modelBuilder.Entity("Core.Entities.EquipoLugar", b =>
                {
                    b.Property<int>("Id_equipo_lugar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Id_equipo")
                        .HasColumnType("int");

                    b.Property<int>("Id_lugar")
                        .HasColumnType("int");

                    b.HasKey("Id_equipo_lugar");

                    b.HasIndex("Id_equipo");

                    b.HasIndex("Id_lugar");

                    b.ToTable("equipo_lugar", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Insidente", b =>
                {
                    b.Property<int>("Id_insidente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("Id_area")
                        .HasColumnType("int");

                    b.Property<int>("Id_categoria")
                        .HasColumnType("int");

                    b.Property<int>("Id_persona")
                        .HasColumnType("int");

                    b.Property<int>("Id_tipo_insidencia")
                        .HasColumnType("int");

                    b.HasKey("Id_insidente");

                    b.HasIndex("Id_area");

                    b.HasIndex("Id_categoria");

                    b.HasIndex("Id_persona");

                    b.HasIndex("Id_tipo_insidencia");

                    b.ToTable("insidente", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Jornada", b =>
                {
                    b.Property<int>("Id_jornada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_jornada");

                    b.ToTable("jornada", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Lugar", b =>
                {
                    b.Property<int>("Id_lugar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Id_area")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_lugar");

                    b.HasIndex("Id_area");

                    b.ToTable("lugar", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Persona", b =>
                {
                    b.Property<int>("Id_persona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Id_jornada")
                        .HasColumnType("int");

                    b.Property<int>("Id_salon")
                        .HasColumnType("int");

                    b.Property<int>("Id_tipo_documento")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Numero_documento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id_persona");

                    b.HasIndex("Id_jornada");

                    b.HasIndex("Id_salon");

                    b.HasIndex("Id_tipo_documento");

                    b.ToTable("persona", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Salon", b =>
                {
                    b.Property<int>("Id_salon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_salon");

                    b.ToTable("salon", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoDocumento", b =>
                {
                    b.Property<int>("Id_tipo_documento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_tipo_documento");

                    b.ToTable("tipo_documento", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoInsidente", b =>
                {
                    b.Property<int>("Id_tipo_insidente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id_tipo_insidente");

                    b.ToTable("tipo_insidencia", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Trainer", b =>
                {
                    b.Property<int>("Id_trainer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Id_arl")
                        .HasColumnType("int");

                    b.HasKey("Id_trainer");

                    b.HasIndex("Id_arl");

                    b.ToTable("trainer", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TrainerPersona", b =>
                {
                    b.Property<int>("Id_trainer_persona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Id_persona")
                        .HasColumnType("int");

                    b.Property<int>("Id_trainer")
                        .HasColumnType("int");

                    b.HasKey("Id_trainer_persona");

                    b.HasIndex("Id_persona");

                    b.HasIndex("Id_trainer");

                    b.ToTable("trainer_persona", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Camper", b =>
                {
                    b.HasOne("Core.Entities.Eps", "Eps")
                        .WithMany("Campers")
                        .HasForeignKey("Id_eps")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Eps");
                });

            modelBuilder.Entity("Core.Entities.CamperPersona", b =>
                {
                    b.HasOne("Core.Entities.Camper", "Camper")
                        .WithMany("CamperPersonas")
                        .HasForeignKey("Id_camper")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Persona", "Persona")
                        .WithMany("CamperPersonas")
                        .HasForeignKey("Id_persona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Camper");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Core.Entities.EquipoComponente", b =>
                {
                    b.HasOne("Core.Entities.Equipo", "Equipo")
                        .WithMany("EquipoComponentes")
                        .HasForeignKey("Id_equipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Componente", "Componente")
                        .WithMany("EquipoComponentes")
                        .HasForeignKey("id_componente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Componente");

                    b.Navigation("Equipo");
                });

            modelBuilder.Entity("Core.Entities.EquipoLugar", b =>
                {
                    b.HasOne("Core.Entities.Equipo", "Equipo")
                        .WithMany("EquipoLugares")
                        .HasForeignKey("Id_equipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Lugar", "Lugar")
                        .WithMany("EquipoLugares")
                        .HasForeignKey("Id_lugar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipo");

                    b.Navigation("Lugar");
                });

            modelBuilder.Entity("Core.Entities.Insidente", b =>
                {
                    b.HasOne("Core.Entities.Area", "Area")
                        .WithMany("Insidentes")
                        .HasForeignKey("Id_area")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Categoria", "Categoria")
                        .WithMany("Insidentes")
                        .HasForeignKey("Id_categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Persona", "Persona")
                        .WithMany("Insidentes")
                        .HasForeignKey("Id_persona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoInsidente", "TipoInsidente")
                        .WithMany("Insidentes")
                        .HasForeignKey("Id_tipo_insidencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Categoria");

                    b.Navigation("Persona");

                    b.Navigation("TipoInsidente");
                });

            modelBuilder.Entity("Core.Entities.Lugar", b =>
                {
                    b.HasOne("Core.Entities.Area", "Area")
                        .WithMany("Lugares")
                        .HasForeignKey("Id_area")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Core.Entities.Persona", b =>
                {
                    b.HasOne("Core.Entities.Jornada", "Jornada")
                        .WithMany("Personas")
                        .HasForeignKey("Id_jornada")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Salon", "Salon")
                        .WithMany("Personas")
                        .HasForeignKey("Id_salon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoDocumento", "TipoDocumento")
                        .WithMany("Personas")
                        .HasForeignKey("Id_tipo_documento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jornada");

                    b.Navigation("Salon");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Core.Entities.Trainer", b =>
                {
                    b.HasOne("Core.Entities.Arl", "Arl")
                        .WithMany("Trainers")
                        .HasForeignKey("Id_arl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arl");
                });

            modelBuilder.Entity("Core.Entities.TrainerPersona", b =>
                {
                    b.HasOne("Core.Entities.Persona", "Persona")
                        .WithMany("TrainerPersonas")
                        .HasForeignKey("Id_persona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Trainer", "Trainer")
                        .WithMany("TrainerPersonas")
                        .HasForeignKey("Id_trainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Core.Entities.Area", b =>
                {
                    b.Navigation("Insidentes");

                    b.Navigation("Lugares");
                });

            modelBuilder.Entity("Core.Entities.Arl", b =>
                {
                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("Core.Entities.Camper", b =>
                {
                    b.Navigation("CamperPersonas");
                });

            modelBuilder.Entity("Core.Entities.Categoria", b =>
                {
                    b.Navigation("Insidentes");
                });

            modelBuilder.Entity("Core.Entities.Componente", b =>
                {
                    b.Navigation("EquipoComponentes");
                });

            modelBuilder.Entity("Core.Entities.Eps", b =>
                {
                    b.Navigation("Campers");
                });

            modelBuilder.Entity("Core.Entities.Equipo", b =>
                {
                    b.Navigation("EquipoComponentes");

                    b.Navigation("EquipoLugares");
                });

            modelBuilder.Entity("Core.Entities.Jornada", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Core.Entities.Lugar", b =>
                {
                    b.Navigation("EquipoLugares");
                });

            modelBuilder.Entity("Core.Entities.Persona", b =>
                {
                    b.Navigation("CamperPersonas");

                    b.Navigation("Insidentes");

                    b.Navigation("TrainerPersonas");
                });

            modelBuilder.Entity("Core.Entities.Salon", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Core.Entities.TipoDocumento", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Core.Entities.TipoInsidente", b =>
                {
                    b.Navigation("Insidentes");
                });

            modelBuilder.Entity("Core.Entities.Trainer", b =>
                {
                    b.Navigation("TrainerPersonas");
                });
#pragma warning restore 612, 618
        }
    }
}
